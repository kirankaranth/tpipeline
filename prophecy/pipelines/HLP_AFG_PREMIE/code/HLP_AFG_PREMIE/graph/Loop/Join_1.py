from pyspark.sql import *
from pyspark.sql.functions import *
from pyspark.sql.types import *
from prophecy.utils import *
from prophecy.libs import typed_lit
from .config import *
from HLP_AFG_PREMIE.udfs.UDFs import *

def Join_1(spark: SparkSession, Extract_periode: DataFrame, snp_LNK_PREMIE_RGL_LEEFTIJD: DataFrame) -> (DataFrame):

    try:
        registerUDFs(spark)
    except NameError:
        print("registerUDFs not working")

    Extract_periode.createOrReplaceTempView("Extract_periode")
    snp_LNK_PREMIE_RGL_LEEFTIJD.createOrReplaceTempView("snp_LNK_PREMIE_RGL_LEEFTIJD")
    df1 = spark.sql(
        "SELECT\n  *\n  EXCEPT (_CALC_LEEFTIJD_JAAR_INGANGSDATUM),\n  _CALC_LEEFTIJD_JAAR_INGANGSDATUM AS LEEFTIJD_JAAR_INGANGSDATUM\nFROM (\n  SELECT\n    GREATEST(PERIODE_PERS.INGANG_DTM, SNAP_RGL_LEEFTIJD.INGANG_DTM) AS INGANG_DTM,\n    LEAST(PERIODE_PERS.EIND_DTM, SNAP_RGL_LEEFTIJD.EIND_DTM) AS EIND_DTM,\n    COALESCE(PERIODE_PERS.LEEFTIJD_VAN, SNAP_RGL_LEEFTIJD.LEEFTIJD_VAN) AS LEEFTIJD_VAN,\n    COALESCE(PERIODE_PERS.LEEFTIJD_TOT_MET, SNAP_RGL_LEEFTIJD.LEEFTIJD_TOT_MET) AS LEEFTIJD_TOT_MET,\n    SNAP_RGL_LEEFTIJD.LEEFTIJD_BDG,\n    SNAP_RGL_LEEFTIJD.LEEFTIJD_PCT,\n    CASE\n      WHEN GREATEST(\n        0,\n        CZ_SAS_BR_T_NATUURLIJK_PERS_LEEFTIJD(\n          Extract_periode.REKEN_GEBOORTE_DTM,\n          GREATEST(periode_pers.INGANG_DTM, snap_rgl_leeftijd.INGANG_DTM),\n          EXPR('$SYSPEILDATUM')\n        )\n      ) <=> 30\n      AND _CALC_LEEFTIJD_JAAR_INGANGSDATUM <=> 30\n      AND RTRIM(COALESCE(PERIODE_PERS.LABEL_KEY, '')) <=> '001'\n      THEN 29\n      ELSE GREATEST(\n        0,\n        CZ_SAS_BR_T_NATUURLIJK_PERS_LEEFTIJD(\n          Extract_periode.REKEN_GEBOORTE_DTM,\n          GREATEST(periode_pers.INGANG_DTM, snap_rgl_leeftijd.INGANG_DTM),\n          EXPR('$SYSPEILDATUM')\n        )\n      )\n    END AS INGANG_DTM_LEEFTIJD,\n    GREATEST(\n      0,\n      CZ_SAS_BR_T_NATUURLIJK_PERS_LEEFTIJD(\n        Extract_periode.REKEN_GEBOORTE_DTM,\n        LEAST(periode_pers.EIND_DTM, snap_rgl_leeftijd.EIND_DTM),\n        EXPR('$SYSPEILDATUM')\n      )\n    ) AS EIND_DTM_LEEFTIJD,\n    PERIODE_PERS.ZORGVERZEKERING_IDC,\n    PERIODE_PERS.BRN_PERSOON_ID,\n    PERIODE_PERS.GEBOORTE_DTM,\n    PERIODE_PERS.LAND_ID,\n    PERIODE_PERS.ZORGVERZ_OVEREENKOMST_ID,\n    PERIODE_PERS.BOUWSTEEN_ID,\n    PERIODE_PERS.LABEL_ID,\n    PERIODE_PERS.PRODUCTSET_SOORT_ID,\n    PERIODE_PERS.COLLECTIVITEIT_OVEREENKOMST_ID,\n    PERIODE_PERS.BETAAL_TERMIJN_ID,\n    PERIODE_PERS.EIGEN_RISICO_REGELING_ID,\n    PERIODE_PERS.REFERENTIEPREMIE_BDG,\n    PERIODE_PERS.FABRIEKSPRIJS_BDG,\n    PERIODE_PERS.COMMERCIELE_TOESLAG_BDG,\n    PERIODE_PERS.EDWH_RESOURCE_ID,\n    SNAP_RGL_LEEFTIJD.FABRIEKSPRIJS_BDG AS LFT_FABRIEKSPRIJS_BDG,\n    SNAP_RGL_LEEFTIJD.COMM_TOESLAG_BDG AS LFT_COMM_TOESLAG_BDG,\n    YEAR(GREATEST(PERIODE_PERS.INGANG_DTM, SNAP_RGL_LEEFTIJD.INGANG_DTM)) - YEAR(PERIODE_PERS.REKEN_GEBOORTE_DTM) AS _CALC_LEEFTIJD_JAAR_INGANGSDATUM,\n    PERIODE_PERS.TABELPREMIE_IDC,\n    PERIODE_PERS.LABEL_KEY,\n    PERIODE_PERS.GESLACHT_ID\n  FROM Extract_periode AS PERIODE_PERS\n  LEFT JOIN snp_LNK_PREMIE_RGL_LEEFTIJD AS SNAP_RGL_LEEFTIJD\n    ON PERIODE_PERS.COLLECTIVITEIT_OVEREENKOMST_ID <=> SNAP_RGL_LEEFTIJD.COLLECTIVITEIT_OVEREENKOMST_ID\n    AND PERIODE_PERS.PRODUCTSET_SOORT_ID <=> SNAP_RGL_LEEFTIJD.PRODUCTSET_SOORT_ID\n    AND PERIODE_PERS.BOUWSTEEN_ID <=> SNAP_RGL_LEEFTIJD.BOUWSTEEN_ID\n    AND COALESCE(PERIODE_PERS.INGANG_DTM, CAST('0001-01-01' AS DATE)) <= COALESCE(SNAP_RGL_LEEFTIJD.EIND_DTM, CAST('0001-01-01' AS DATE))\n    AND COALESCE(PERIODE_PERS.EIND_DTM, CAST('0001-01-01' AS DATE)) >= COALESCE(SNAP_RGL_LEEFTIJD.INGANG_DTM, CAST('0001-01-01' AS DATE))\n    AND NOT (\n      PERIODE_PERS.TABELPREMIE_IDC <=> 1\n    )\n)"
    )

    return df1
