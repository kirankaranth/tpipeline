{"initCode":"","code":"\"\"\" UDF cz_sas_intnx \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DateType\n\n\n@udf(returnType=DateType())\ndef cz_sas_intnx(\n    custom_interval: str, start_from, increment: int, alignment: str = \"BEGINNING\"\n):\n    # pylint: disable=import-outside-toplevel\n    from datetime import date, timedelta, datetime\n    from dateutil.relativedelta import relativedelta\n    import calendar\n\n    custom_interval = custom_interval.upper()\n    alignment = alignment.upper()\n\n    if increment is None:\n        return None\n\n    if not isinstance(start_from, date):\n        if isinstance(start_from, str):\n            start_from = datetime.strptime(start_from, \"%Y-%m-%d\").date()\n        elif isinstance(start_from, datetime):\n            start_from = start_from.date()\n        else:\n            raise ValueError(\n                f\"input argument start_from of type {type(start_from)} is not currently supported\"\n            )\n\n    if alignment in (\"S\", \"SAME\", \"SAMEDAY\"):\n        if custom_interval in (\"SECOND\", \"SECONDS\"):\n            return start_from + timedelta(seconds=increment)\n        if custom_interval in (\"MINUTE\", \"MINUTES\"):\n            return start_from + timedelta(minutes=increment)\n        if custom_interval in (\"HOUR\", \"HOURS\"):\n            return start_from + timedelta(hours=increment)\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return start_from + timedelta(days=increment)\n        if custom_interval in (\"WEEK\", \"DTWEEK\"):\n            return start_from + timedelta(weeks=increment)\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            return date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment)\n        if custom_interval in (\"QTR\", \"DTQTR\"):\n            return date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment * 3)\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            return date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(years=increment)\n\n        raise ValueError(\n            f\"{custom_interval} interval for alignment {alignment} is not currently supported\"\n        )\n    if alignment in (\"BEGINNING\", \"B\", \"BEGIN\"):\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return start_from + timedelta(days=increment)\n        if custom_interval in (\"WEEK\", \"DTWEEK\"):\n            return (\n                start_from\n                + timedelta(weeks=increment)\n                - timedelta(days=start_from.weekday() + 1)\n            )\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            res_date = date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment)\n            return date(res_date.year, res_date.month, 1)\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            start_from = start_from.replace(month=1).replace(day=1)\n            return start_from + relativedelta(years=increment)\n\n        raise ValueError(\n            f\"{custom_interval} interval for alignment {alignment} is not currently supported\"\n        )\n    if alignment in (\"END\", \"E\"):\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return start_from + timedelta(days=increment)\n        if custom_interval in (\"WEEK\", \"DTWEEK\"):\n            return (\n                start_from\n                + timedelta(weeks=increment)\n                - timedelta(days=start_from.weekday())\n                + timedelta(days=5)\n            )\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            res_date = start_from + relativedelta(months=increment)\n            return date(\n                res_date.year,\n                res_date.month,\n                calendar.monthrange(res_date.year, res_date.month)[1],\n            )\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            res_date = date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(years=increment)\n            return date(res_date.year, 12, res_date.day)\n\n        raise ValueError(\n            f\"{custom_interval} interval for alignment {alignment} is not currently supported\"\n        )\n\n    raise ValueError(f\"{custom_interval} something is not currently supported\")\n"}