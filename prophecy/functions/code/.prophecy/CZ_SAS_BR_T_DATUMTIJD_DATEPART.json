{"initCode":"","code":"\"\"\" UDF \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DateType\n\n# case when &datumtijd. = . then &default. else datepart(&datumtijd.) - &correctie. end\n# Bepalen datum op basis van datumtijd veld met opties\n# voor vullen wanneer lege waarde en correctie in dagen\n# Determine date based on datetime field with options\n# for filling when empty value and correction in days\n\n\n@udf(returnType=DateType())\ndef cz_sas_br_t_datumtijd_datepart(datumtijd, default, correctie):\n    # pylint: disable=import-outside-toplevel\n    from datetime import datetime, date, timedelta\n\n    def datepart(date_time):\n        if isinstance(date_time, date):\n            return date_time\n        if isinstance(date_time, datetime):\n            return date_time.date()\n\n        try:\n            result = datetime.strptime(date_time, \"%Y-%m-%d %H:%M:%S\")\n        except ValueError:\n            try:\n                result = datetime.strptime(date_time, \"%Y-%m-%dT%H:%M:%S\")\n            except ValueError as e:\n                raise ValueError(\n                    f\"Input date '{date_time}' is not in allowed formats\"\n                ) from e\n\n        return result\n\n    if default:\n        default_obj = datepart(default)\n    else:\n        default_obj = None\n\n    result = (\n        default_obj\n        if datumtijd is None\n        else datepart(datumtijd) - timedelta(days=correctie)\n    )\n\n    return result\n"}