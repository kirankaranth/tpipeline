{"initCode":"\"\"\"\nfrom decimal import Decimal, ROUND_HALF_UP \n\"\"\"\n\nfrom decimal import Decimal, ROUND_HALF_UP  # pylint: disable = W0611\n","code":"\"\"\" UDF \n\n Original SAS code:\n  case when \n    round(sum(&BASISBEDRAG*(coalesce(&PERCENTAGE,0)/100),&REGELINGBEDRAG),.01) + &BASISBEDRAG < 0 \n        then &BASISBEDRAG * -1\n       else \n       round(sum(&BASISBEDRAG*(coalesce(&PERCENTAGE,0)/100),&REGELINGBEDRAG),.01) \n  end\n\n\"\"\"\n\nfrom decimal import Decimal, ROUND_HALF_UP\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DoubleType\n\n\n@udf(returnType=DoubleType())\ndef cz_sas_bereken_regeling(\n    basisbedrag: float, percentage: float, regelingbedrag: float\n) -> float:\n    basisbedrag = basisbedrag or 0.0\n    percentage = percentage or 0.0\n    regelingbedrag = regelingbedrag or 0.0\n\n    basisbedrag = Decimal(str(basisbedrag))  # pylint: disable = E0602\n    percentage = Decimal(str(percentage))  # pylint: disable = E0602\n    regelingbedrag = Decimal(str(regelingbedrag))  # pylint: disable = E0602\n\n    def custom_round(number, pr):\n        exp = Decimal(\"1\").scaleb(-pr)  # pylint: disable = E0602\n        decimal_number = Decimal(str(number))  # pylint: disable = E0602\n        rounded_number = decimal_number.quantize(\n            exp, rounding=ROUND_HALF_UP  # pylint: disable = E0602\n        )\n        return float(rounded_number)\n\n    rounded_expr = custom_round(\n        (\n            basisbedrag * percentage / Decimal(str(100.0))  # pylint: disable = E0602\n            + regelingbedrag\n        ),\n        2,\n    )\n    begrag = Decimal(str(rounded_expr))  # pylint: disable = E0602\n\n    if begrag + basisbedrag < Decimal(str(0.0)):  # pylint: disable = E0602\n        return float(basisbedrag * Decimal(str(-1.0)))  # pylint: disable = E0602\n    return float(begrag)\n"}