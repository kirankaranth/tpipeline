{"initCode":"","code":"\"\"\" UDF cz_sas_put_z \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\n\n# This function mimics some of the SAS PUT function behaviour.\n# Some means:\n# 1. It does not work with negative numbers since I never needed them.\n# 2. Small numbers, like 0.000002 = 2E-6 have not been tested for the same reason.\n# 3. I cannot understand the logic why SAS takes the\n# \"maximum meaningful digits\" or the \"scientific notation\" approach.\n# This means, put(619273619273, z9.) equals to \"6.1927E11\", not \"6192736E5\", but\n#             put(123456.1,     z5.) equals to \"123E3\",     not \"1.2E5\"\n# moreover,   put(123456789012, z6.) equals to \"0123E9\",    not \"1234E8\", nor \"1.2E12\"\n# Why?\n# No ideas.\n\n\n@udf(returnType=StringType())\ndef cz_sas_put_z(input_number: float, w: int, d: int = 0) -> str:\n    if input_number is None:\n        return \".\".rjust(w)\n\n    if d != 0:  # fail fast\n        raise ValueError(\n            f\"\"\"put(value, z{w}.{d}) is not currently \"\"\"\n            + \"\"\"supported, zX.0 formats only\"\"\"\n        )\n\n    # rounding because Python builtin round() is insane:\n    # round(100.5) == 100 and round(101.5) == 102\n    if input_number % 1 >= 0.5:\n        input_number = int(input_number) + 1\n    else:\n        input_number = int(input_number)\n\n    if len(str(input_number)) <= w:\n        return str(input_number).zfill(w)\n\n    w_adjusted: int = w\n    if input_number >= float(\"1E10\"):\n        # exponent will require extra char\n        # so we have less space for mantissa digits\n        w_adjusted = w_adjusted - 1\n\n    sci_notation = format(input_number, f\".{w_adjusted-4}E\")\n\n    # Split the scientific notation into mantissa and exponent\n    mantissa, exponent = sci_notation.split(\"E\")\n\n    # squash \"1.000\" for mantissa to \"1\" and \"+02\" for exponent to \"2\"\n    exponent = int(exponent)\n    mantissa = float(mantissa)\n\n    formatted_number = f\"{mantissa}E{exponent}\"\n\n    if len(formatted_number) < w:\n        formatted_number = formatted_number.zfill(w)\n\n    return formatted_number\n"}