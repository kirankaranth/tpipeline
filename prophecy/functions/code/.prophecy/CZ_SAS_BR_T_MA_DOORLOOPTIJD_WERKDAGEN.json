{"initCode": "", "code": "\"\"\" UDF \"\"\"\n\n# Original SAS code:\n# Auto-generated pyspark code:\nimport datetime\nfrom pyspark.sql.functions import udf, col, to_date\nfrom pyspark.sql.types import IntegerType\n\n\n# Business Rule: cz_sas_br_t_ma_doorlooptijd_werkdagen\n# SAS Code: CASE WHEN &AFGEHANDELD_IDC = 0 THEN intck('weekday', DATEPART(&POST_DTD), &PEIL_DTM)\n# ELSE intck('weekday', DATEPART(&POST_DTD), &AFHANDEL_DTM) END\n\n\n@udf(returnType=IntegerType())\ndef cz_sas_br_t_ma_doorlooptijd_werkdagen(\n    post_dtd, peil_dtm, afhandel_dtm, afgehandeld_idc\n):\n    def count_weekdays(start_date, end_date):\n        if start_date is None or end_date is None or start_date > end_date:\n            return None\n\n        total_days = (end_date - start_date).days + 1\n        weekdays = 0\n\n        for day in range(total_days):\n            current_day = (start_date + datetime.timedelta(days=day)).weekday()\n            # Monday = 0, Sunday = 6, so exclude Saturday and Sunday\n            if current_day < 5:\n                weekdays += 1\n\n        return weekdays\n\n    if afgehandeld_idc == 0:\n        end_date = peil_dtm\n    else:\n        end_date = afhandel_dtm\n\n    post_dtd_date = (\n        to_date(col(post_dtd)).cast(\"date\") if isinstance(post_dtd, str) else post_dtd\n    )\n    end_date = (\n        to_date(col(end_date)).cast(\"date\") if isinstance(end_date, str) else end_date\n    )\n\n    return count_weekdays(post_dtd_date, end_date)\n"}