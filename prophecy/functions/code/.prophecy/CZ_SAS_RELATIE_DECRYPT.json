{"initCode":"","code":"\"\"\" UDF cz_sas_relatie_decrypt \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\n\n\n@udf(returnType=StringType())\ndef cz_sas_relatie_decrypt(decrypt_var: str, relatienr_var: str, is_bsn: bool) -> str:\n    # helper variables\n    numbers1_26 = list(range(1, 27))\n    numbers1_10 = list(range(1, 10))\n    numbers_coded = [\"3\", \"7\", \"9\", \"6\", \"1\", \"8\", \"5\", \"2\", \"4\"]\n    uc_letters = [\n        \"P\",\n        \"B\",\n        \"I\",\n        \"Y\",\n        \"E\",\n        \"O\",\n        \"V\",\n        \"S\",\n        \"G\",\n        \"C\",\n        \"R\",\n        \"W\",\n        \"L\",\n        \"T\",\n        \"A\",\n        \"N\",\n        \"K\",\n        \"D\",\n        \"X\",\n        \"Z\",\n        \"M\",\n        \"F\",\n        \"U\",\n        \"J\",\n        \"Q\",\n        \"H\",\n    ]\n    lc_letters = [\n        \"t\",\n        \"x\",\n        \"b\",\n        \"p\",\n        \"z\",\n        \"a\",\n        \"i\",\n        \"d\",\n        \"n\",\n        \"w\",\n        \"k\",\n        \"s\",\n        \"q\",\n        \"y\",\n        \"g\",\n        \"o\",\n        \"u\",\n        \"e\",\n        \"m\",\n        \"c\",\n        \"h\",\n        \"r\",\n        \"v\",\n        \"f\",\n        \"l\",\n        \"j\",\n    ]\n\n    # ucl_to_numbers\n    h_hog_eltrs = dict(zip(uc_letters, numbers1_26))\n\n    # numbers_to_ucl\n    h_hog_eloc = dict(zip(numbers1_26, uc_letters))\n\n    # lcl_to_numbers\n    h_lag_eltrs = dict(zip(lc_letters, numbers1_26))\n\n    # numbers_to_lcl\n    h_lag_eloc = dict(zip(numbers1_26, lc_letters))\n\n    # numbers_to_coded\n    h_cfr_sloc = dict(zip(numbers1_10, numbers_coded))\n\n    # coded numbers to numbers\n    h_cfr_sltrs = dict(zip(numbers_coded, numbers1_10))\n\n    retain_dict = {}\n    retain_dict[\"bsn_temp\"] = 0\n    decrypted_string = \"\"\n\n    def numbers_decrypt(letter: str) -> str:\n        rc_cfr_sltrs = h_cfr_sltrs.get(letter)\n        if rc_cfr_sltrs is not None:\n            cfr2pos = 9 if i_sas % 9 == 0 else i_sas % 9\n            cfr2 = int(relatienr_var[cfr2pos - 1])\n            cfr3 = rc_cfr_sltrs - 3 if cfr2 in [0, 9] else rc_cfr_sltrs - cfr2\n            cfr3 = cfr3 + 9 if cfr3 < 1 else cfr3\n            rc_cfr_sloc = h_cfr_sloc.get(cfr3)\n\n            if rc_cfr_sloc is not None:\n                return rc_cfr_sloc\n\n        raise ValueError(f\"Invalid number: {letter}\")\n\n    def bsn_decrypt(letter: str) -> str:\n        if i_sas == 1:\n            retain_dict[\"bsn_temp\"] = int(letter) * 9\n        elif i_sas < 9:\n            retain_dict[\"bsn_temp\"] = retain_dict[\"bsn_temp\"] + int(letter) * (\n                10 - i_sas\n            )\n        elif i_sas == 9:\n            mod_bsn_temp = retain_dict[\"bsn_temp\"] % 11\n            formatted_mod = f\"{mod_bsn_temp:02}\"\n            out = formatted_mod[-1]\n            return str(out)\n        return letter\n\n    def ucl_decrypt(letter: str) -> str:\n        rc_hog_eltrs = h_hog_eltrs.get(letter)\n        if rc_hog_eltrs is not None:\n            cfr2pos = 9 if i_sas % 9 == 0 else i_sas % 9\n            cfr2 = int(relatienr_var[cfr2pos - 1])\n            cfr3 = rc_hog_eltrs - 4 if cfr2 == 0 else rc_hog_eltrs - cfr2\n            cfr3 = cfr3 + 26 if cfr3 < 1 else cfr3\n            rc_hog_eloc = h_hog_eloc.get(cfr3)\n\n            if rc_hog_eloc is not None:\n                return rc_hog_eloc\n\n        raise ValueError(f\"Invalid letter: {letter}\")\n\n    def lcl_decrypt(letter: str) -> str:\n        rc_lag_eltrs = h_lag_eltrs.get(letter)\n\n        if rc_lag_eltrs is not None:\n            cfr2pos = 9 if i_sas % 9 == 0 else i_sas % 9\n            cfr2 = int(relatienr_var[cfr2pos - 1])\n            cfr3 = rc_lag_eltrs - 4 if cfr2 == 0 else rc_lag_eltrs - cfr2\n            cfr3 = cfr3 + 26 if cfr3 < 1 else cfr3\n            rc_lag_eloc = h_lag_eloc.get(cfr3)\n\n            if rc_lag_eloc is not None:\n                return rc_lag_eloc\n\n        raise ValueError(f\"Invalid letter: {letter}\")\n\n    # if decrypt_var is null\n    if decrypt_var is None:\n        return None\n\n    # if decrypt_var just empty string or string with spaces only return None\n    if decrypt_var.strip() == \"\":\n        return None\n\n    if relatienr_var is None:\n        return decrypt_var\n\n    for i_sas, one_letter in enumerate(decrypt_var, start=1):\n        asci_l = ord(one_letter)\n        tmp = one_letter\n        if 49 <= asci_l <= 57:\n            tmp = numbers_decrypt(one_letter)\n\n        if is_bsn:\n            tmp2 = bsn_decrypt(tmp)\n            if i_sas == 9:\n                tmp = tmp2\n        elif 65 <= asci_l <= 90:\n            tmp = ucl_decrypt(one_letter)\n        elif 97 <= asci_l <= 122:\n            tmp = lcl_decrypt(one_letter)\n\n        decrypted_string += tmp\n\n    return decrypted_string\n"}