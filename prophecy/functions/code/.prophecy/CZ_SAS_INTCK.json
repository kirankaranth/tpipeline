{"initCode":"","code":"\"\"\"\nUDF Function: cz_sas_intck\nThis function calculates the interval difference \nbetween two dates using various intervals (DAY, MONTH, YEAR, etc.).\n\n\"\"\"\n\nfrom pyspark.sql.functions import udf, ceil\nfrom pyspark.sql.types import IntegerType\n\n\n@udf(returnType=IntegerType())\ndef cz_sas_intck(custom_interval, start_date, end_date, method=\"D\"):\n    # pylint: disable=import-outside-toplevel\n    # pylint: disable=missing-function-docstring\n\n    import builtins\n    from datetime import timedelta\n\n    if start_date is None or end_date is None:\n        return None\n\n    custom_interval = custom_interval.upper()\n    method = method.upper()\n\n    if method in (\"C\", \"CONTINUOUS\", \"CONT\"):\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            result = (end_date - start_date).days\n\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            delta_years = end_date.year - start_date.year\n            delta_months = end_date.month - start_date.month\n            total_months = delta_years * 12 + delta_months\n\n            # Adjust for day differences\n            if end_date.day < start_date.day:\n                total_months -= 1\n\n            # Special case for leap years\n            is_leap_start = start_date.year % 4 == 0 and (\n                start_date.year % 100 != 0 or start_date.year % 400 == 0\n            )\n            is_leap_end = end_date.year % 4 == 0 and (\n                end_date.year % 100 != 0 or end_date.year % 400 == 0\n            )\n\n            if (\n                start_date.strftime(\"%m-%d\") == \"02-28\"\n                and end_date.strftime(\"%m-%d\") == \"02-29\"\n                and is_leap_end\n                and not is_leap_start\n            ):\n                total_months -= 1\n\n            if (\n                start_date.strftime(\"%m-%d\") == \"02-29\"\n                and end_date.strftime(\"%m-%d\") == \"02-28\"\n                and is_leap_start\n                and not is_leap_end\n            ):\n                total_months += 1\n\n            result = total_months\n\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            delta_years = end_date.year - start_date.year\n            if (end_date.month, end_date.day) < (start_date.month, start_date.day):\n                delta_years -= 1\n            result = delta_years\n\n    # Add other intervals here\n    if method in (\"D\", \"DESCRETE\", \"DISC\"):\n        # not fully tested yet, please use with caution\n        if custom_interval in (\"WEEKDAY23456W\", \"DTWEEKDAY23456W\"):\n            delta = builtins.sum(\n                [\n                    (start_date + timedelta(days=i)).weekday() not in (2, 3, 4, 5, 6)\n                    for i in range((end_date - start_date).days + 1)\n                ]\n            )\n            return delta\n\n        delta = end_date - start_date\n\n        if custom_interval in (\"SECOND\", \"SECONDS\"):\n            return delta.seconds\n        if custom_interval in (\"MINUTE\", \"MINUTES\"):\n            return ceil(delta.seconds / 60)\n        if custom_interval in (\"HOUR\", \"HOURS\"):\n            return ceil(delta.seconds / (60 * 60))\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return delta.days\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            return (end_date.year - start_date.year) * 12 + (\n                end_date.month - start_date.month\n            )\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            return end_date.year - start_date.year\n\n        raise ValueError(f\"{custom_interval} interval is not currently supported\")\n\n    return result\n"}