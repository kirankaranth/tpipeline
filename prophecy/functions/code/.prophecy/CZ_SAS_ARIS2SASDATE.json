{"initCode":"","code":"\"\"\" UDF cz_sas_aris2sasdate\nARIS2SASdate = MDY(\n    INPUT(SUBSTR(PUT(&dateARIS.,8.),5,2),8.),\n    INPUT(SUBSTR(PUT(&dateARIS.,8.),7,2),8.),\n    INPUT(SUBSTR(PUT(&dateARIS.,8.),1,4),8.)\n    )\n\nZet ARIS-datum om naar SAS-datum\n\nARIS date is the date of the format YYYYMMDD in the numeric type,\nfor example: number 20130124 represents the date 2013-01-24\n\"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DateType\n\n\n@udf(returnType=DateType())\ndef cz_sas_aris2sasdate(date_aris):\n    # pylint: disable=import-outside-toplevel\n    # pylint: disable=superfluous-parens\n    from datetime import date\n\n    try:\n        date_str = str(date_aris)\n        length = len(date_str)\n\n        # Determine year, month, and day based on length\n        if length == 6:  # YYMMDD format\n            year, month, day = int(date_str[:2]), int(date_str[2:4]), int(date_str[4:])\n            year += 2000 if year < 50 else 1900\n        elif length == 8:  # YYYYMMDD format\n            year, month, day = int(date_str[:4]), int(date_str[4:6]), int(date_str[6:])\n        elif length == 5:  # Edge case like YMMDD (not standard)\n            year, month, day = (\n                int(date_str[0]) + 2000,\n                int(date_str[1:3]),\n                int(date_str[3:]),\n            )\n        else:\n            return None\n\n        # Validate date ranges directly\n        if not (1 <= month <= 12 and 1 <= day <= 31) or not (1583 <= year <= 9999):\n            return None\n\n        return date(year, month, day)\n\n    except (ValueError, TypeError):\n        return None\n"}