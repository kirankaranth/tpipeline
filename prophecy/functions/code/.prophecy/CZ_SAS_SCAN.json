{"initCode": "", "code": "\"\"\" Simulate SAS SCAN function in Python.\n\nArgs:\n- input_string: The character string to parse.\n- position: The position of the word or substring to extract.\n- delimiter: The delimiter that separates the words or substrings.\n- modifiers (optional): You can specify modifiers like 'M' or 'O' to control the behavior.\n\nReturns:\n- The extracted word or substring.\n\"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\n\n\n# pylint: disable=unused-argument\n@udf(returnType=StringType())\ndef cz_sas_scan(input_string, position, delimiter=\" !$%&()*+,-./;<^|\", modifiers=None):\n    # pylint: disable=import-outside-toplevel\n    import re\n\n    if not input_string:\n        return \"\"\n\n    # Split the input_string using the delimiter\n    words = re.split(delimiter, input_string)\n\n    # Handle negative position to extract from the right\n    if position < 0:\n        position = len(words) + position + 1\n\n    # Extract the word at the specified position\n    if 1 <= position <= len(words):\n        return words[position - 1]\n\n    # Return an empty string if position is out of range\n    return \"\"\n"}