{"initCode":"","code":"\"\"\"\nContains the inner function \"resolve_pattern\" that applies the logic of SAS macros \"resolvePattern\"\n\nArgs:\n- items: Item list\n- pattern: Pattern for substitution\n- dlm: List delimiter\n- token_string (with default value '#'): Token for substitution\n\nReturns:\n- The concatenated with delimiter input item list values\n\"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\n\n\n@udf(returnType=StringType())\ndef cz_sas_br_t_catx(dlm, items):\n    def resolve_pattern(items, pattern, dlm, token_string=\"#\"):\n        # pylint: disable=import-outside-toplevel\n        import re\n\n        try:\n            # Check if either items or pattern is empty - if not: provide a\n            # description for the function\n            if not items or not pattern:\n                print(\n                    \"\\nRESOLVEPATTERN> Generates text by substituting values of a list into a pattern\"\n                )\n                print(\"        \")\n                print(\n                    \"   Syntax: resolvePattern(item_list, pattern, delimiter, token_string)\"\n                )\n                print(\"        - item_list:      Item list\")\n                print(\"        - delimiter:      List delimiter\")\n                print(\"        - pattern:        Pattern for substitution\")\n                print(\"        - token_string:   Token for substitution\")\n                print()\n                return \"\"\n\n            # Convert item_list to a string representation\n            if isinstance(items, list):\n                item_list_str = \" \".join(\n                    str(item) if item is not None else \"\" for item in items\n                )\n            else:\n                item_list_str = items\n\n            # Split item_list using delimiter\n            list_dlm = (\n                item_list_str.split(\"/\")[1].strip() if \"/\" in item_list_str else \" \"\n            )\n            item_list_str = \" \".join(item_list_str.split(\"/\")[0].split())\n\n            # Remove leading and trailing spaces from delimiter and\n            # token_string\n            dlm = dlm.strip()\n            token_string = token_string.strip()\n\n            # If delimiter is empty, set it to a single space\n            dlm = \" \" if not dlm else dlm\n\n            # Substitute tokens in pattern with items\n            resolved_pattern = \"\"\n            for item in item_list_str.split(list_dlm):\n                if item:\n                    if resolved_pattern:\n                        resolved_pattern += dlm\n                    resolved_pattern += re.sub(re.escape(token_string), item, pattern)\n\n            return resolved_pattern\n\n        except Exception as e:\n            print(\"An error occurred:\", str(e))\n            return \"\"\n\n    if dlm == \"\":\n        return \"\".join(resolve_pattern(items, \"#\", \",\"))\n\n    return resolve_pattern(items, \"#\", dlm)\n"}