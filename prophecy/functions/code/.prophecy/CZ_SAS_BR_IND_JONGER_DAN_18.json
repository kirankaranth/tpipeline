{"initCode": "", "code": "\"\"\" UDF cz_sas_br_ind_jonger_dan_18 \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import IntegerType\n\n\n@udf(IntegerType())\ndef cz_sas_br_ind_jonger_dan_18(\n    param_peildatum, sas_dtm_gbt_rlt, soort_verzekerden_code, is_gevangen\n):\n    # pylint: disable=import-outside-toplevel\n    from datetime import date, timedelta\n    from dateutil.relativedelta import relativedelta\n    import calendar\n\n    # this INTNX code was taken from CZ_SAS_INTNX_DATE UDF\n    def intnx(custom_interval, start_from, increment, alignment=\"BEGINNING\"):\n        custom_interval = custom_interval.upper()\n        alignment = alignment.upper()\n        if not isinstance(start_from, date):\n            start_from = date(start_from.year, start_from.month, start_from.day)\n        if alignment in (\"S\", \"SAME\", \"SAMEDAY\"):\n            if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n                return start_from + timedelta(days=increment)\n            if custom_interval in (\"WEEK\", \"DTWEEK\"):\n                return start_from + timedelta(weeks=increment)\n            if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n                return date(\n                    start_from.year, start_from.month, start_from.day\n                ) + relativedelta(months=increment)\n            if custom_interval in (\"QTR\", \"DTQTR\"):\n                return date(\n                    start_from.year, start_from.month, start_from.day\n                ) + relativedelta(months=increment * 3)\n            if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n                # return start_from + relativedelta(years=increment)\n                return date(\n                    start_from.year, start_from.month, start_from.day\n                ) + relativedelta(years=increment)\n            raise ValueError(f\"{custom_interval} interval is not currently supported\")\n        if alignment in (\"BEGINNING\", \"B\"):\n            if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n                return start_from + timedelta(days=increment)\n            if custom_interval in (\"WEEK\", \"DTWEEK\"):\n                return (\n                    start_from\n                    + timedelta(weeks=increment)\n                    - timedelta(days=start_from.weekday() + 1)\n                )\n            if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n                res_date = date(\n                    start_from.year, start_from.month, start_from.day\n                ) + relativedelta(months=increment)\n                return date(res_date.year, res_date.month, 1)\n\n            if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n                start_from = start_from.replace(month=1).replace(day=1)\n                return start_from + relativedelta(years=increment)\n            raise ValueError(f\"{custom_interval} interval is not currently supported\")\n        if alignment in (\"END\", \"E\"):\n            if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n                return start_from + timedelta(days=increment)\n            if custom_interval in (\"WEEK\", \"DTWEEK\"):\n                return (\n                    start_from\n                    + timedelta(weeks=increment)\n                    - timedelta(days=start_from.weekday())\n                    + timedelta(days=5)\n                )\n            if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n                res_date = start_from + relativedelta(months=increment)\n                return date(\n                    res_date.year,\n                    res_date.month,\n                    calendar.monthrange(res_date.year, res_date.month)[1],\n                )\n            if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n                res_date = date(\n                    start_from.year, start_from.month, start_from.day\n                ) + relativedelta(years=increment)\n                return date(res_date.year, 12, res_date.day)\n            raise ValueError(f\"{custom_interval} interval is not currently supported\")\n            # end of INTNX code\n\n        raise ValueError(f\"{alignment} alignment is not currently supported\")\n\n    if sas_dtm_gbt_rlt is None:\n        return 0\n\n    condition_1 = intnx(\"year\", param_peildatum, -18, \"s\") <= sas_dtm_gbt_rlt\n    condition_2 = is_gevangen == 1 or soort_verzekerden_code in (\"HVB\", \"COMBIB\")\n\n    return 1 if (condition_1 and condition_2) else 0\n"}