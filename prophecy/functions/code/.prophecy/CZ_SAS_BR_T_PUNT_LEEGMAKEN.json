{"initCode":"","code":"\"\"\" UDF cz_sas_br_t_punt_leegmaken \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\n\n# code: compress(strip(put(&variabelenaam, &lengte..)),'.')\n# params: VARIABELENAAM, LENGTE\n# text: Haalt punt weg bij omzetten leeg numeriek veld naar character\n# text_en: Removes point when converting empty numeric field to character\n\n\n@udf(returnType=StringType())\ndef cz_sas_br_t_punt_leegmaken(value: float, in_format: str) -> str:\n    # Ensure the input value is not None\n    if value is None:\n        return None\n\n    # Extract the numeric length from the format string (e.g., z9 or z2)\n    if in_format.startswith(\"z\") and in_format[1:].isdigit():\n        # Extract the desired length from the format (e.g., 9 for z9)\n        length = int(in_format[1:])\n\n        # Convert the value to an integer and strip leading/trailing spaces\n        result = str(int(float(value)))\n        result = result.strip().replace(\".\", \"\")\n\n        # If the result is longer than the specified length, truncate it\n        if len(result) > length:\n            result = result[:length]\n\n        # Pad the result with leading zeros to match the specified length\n        return result.zfill(length)\n\n    # Raise an error for unsupported formats\n    raise ValueError(f\"Unsupported format: {in_format}\")\n"}