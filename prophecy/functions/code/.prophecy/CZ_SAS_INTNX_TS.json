{"initCode":"","code":"\"\"\" UDF \"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import TimestampType\n\n\n@udf(returnType=TimestampType())\ndef cz_sas_intnx_ts(custom_interval, start_from, increment, alignment=\"BEGINNING\"):\n    # pylint: disable=import-outside-toplevel\n    from datetime import datetime, date, timedelta\n    from dateutil.relativedelta import relativedelta\n    import calendar\n\n    custom_interval = custom_interval.upper()\n    alignment = alignment.upper()\n    if not isinstance(start_from, datetime):\n        start_from = datetime(start_from.year, start_from.month, start_from.day)\n\n    if alignment in (\"S\", \"SAME\"):\n        if custom_interval in (\"SECOND\", \"SECONDS\"):\n            return start_from + timedelta(seconds=increment)\n        if custom_interval in (\"MINUTE\", \"MINUTES\"):\n            return start_from + timedelta(minutes=increment)\n        if custom_interval in (\"HOUR\", \"HOURS\"):\n            return start_from + timedelta(hours=increment)\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return start_from + timedelta(days=increment)\n        if custom_interval in (\"WEEK\", \"DTWEEK\"):\n            return start_from + timedelta(weeks=increment)\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            return date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment)\n        if custom_interval in (\"QTR\", \"DTQTR\"):\n            return date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment * 3)\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            return date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(years=increment)\n\n        raise ValueError(f\"{custom_interval} interval is not currently supported\")\n\n    if alignment in (\"BEGINNING\", \"B\"):\n        if custom_interval in (\"SECOND\", \"SECONDS\"):\n            return (start_from + timedelta(seconds=increment)).replace(microsecond=0)\n        if custom_interval in (\"MINUTE\", \"MINUTES\"):\n            return (start_from + timedelta(minutes=increment)).replace(\n                second=0, microsecond=0\n            )\n        if custom_interval in (\"HOUR\", \"HOURS\"):\n            return (start_from + timedelta(hours=increment)).replace(\n                minute=0, second=0, microsecond=0\n            )\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return (start_from + timedelta(days=increment)).replace(\n                hour=0, minute=0, second=0, microsecond=0\n            )\n        if custom_interval in (\"WEEK\", \"DTWEEK\"):\n            return (\n                start_from\n                + timedelta(weeks=increment)\n                - timedelta(days=start_from.weekday() + 1)\n            ).replace(hour=0, minute=0, second=0, microsecond=0)\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            res_date = date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment)\n            return datetime(res_date.year, res_date.month, res_date.day).replace(\n                day=1, hour=0, minute=0, second=0, microsecond=0\n            )\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            res_date = date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(years=increment)\n            return datetime(res_date.year, 1, res_date.day).replace(\n                day=1, hour=0, minute=0, second=0, microsecond=0\n            )\n\n        raise ValueError(f\"{custom_interval} interval is not currently supported\")\n\n    if alignment in (\"END\", \"E\"):\n        if custom_interval in (\"SECOND\", \"SECONDS\"):\n            return (start_from + timedelta(seconds=increment)).replace(\n                microsecond=999999\n            )\n        if custom_interval in (\"MINUTE\", \"MINUTES\"):\n            return (start_from + timedelta(minutes=increment)).replace(\n                second=59, microsecond=999999\n            )\n        if custom_interval in (\"HOUR\", \"HOURS\"):\n            return (start_from + timedelta(hours=increment)).replace(\n                minute=59, second=59, microsecond=999999\n            )\n        if custom_interval in (\"DAY\", \"DAYS\", \"DTDAY\"):\n            return (start_from + timedelta(days=increment)).replace(\n                hour=23, minute=59, second=59, microsecond=999999\n            )\n        if custom_interval in (\"WEEK\", \"DTWEEK\"):\n            return (\n                start_from\n                + timedelta(weeks=increment)\n                - timedelta(days=start_from.weekday())\n                + timedelta(days=5)\n            ).replace(hour=23, minute=59, second=59, microsecond=999999)\n        if custom_interval in (\"MONTH\", \"MONTHS\", \"DTMONTH\"):\n            res_date = date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(months=increment)\n            return datetime(res_date.year, res_date.month, res_date.day).replace(\n                day=calendar.monthrange(res_date.year, res_date.month)[1],\n                hour=23,\n                minute=59,\n                second=59,\n                microsecond=999999,\n            )\n        if custom_interval in (\"YEAR\", \"YEARS\", \"DTYEAR\"):\n            res_date = date(\n                start_from.year, start_from.month, start_from.day\n            ) + relativedelta(years=increment)\n            return datetime(res_date.year, 12, res_date.day).replace(\n                day=calendar.monthrange(res_date.year, 12)[1],\n                hour=23,\n                minute=59,\n                second=59,\n                microsecond=999999,\n            )\n\n        raise ValueError(f\"{custom_interval} interval is not currently supported\")\n\n    raise ValueError(f\"{alignment} alignment is not currently supported\")\n"}