{"initCode":"","code":"\"\"\" UDF cz_sas_br_t_adres_type\nCASE (&resource_item)\nWHEN 'STG_EDWH.STG_MAR_Z430900001_HST' THEN '1' /* Woon */\nWHEN 'STG_EDWH.STG_MAR_Z430910001_HST' THEN '2' /* Correspondentie */\nWHEN 'STG_EDWH.STG_MAR_Z430915001_HST' THEN '6' /* Woonlandhistorie */\nWHEN 'STG_EDWH.STG_KIK_PROSPECTADRES_HST' THEN CASE (&adres_type)\nWHEN 'W' THEN '1' /* Woon */\nWHEN 'C' THEN '2' /* Correspondentie */\nELSE '3' /* Onbekend */ END\nWHEN 'STG_EDWH.STG_MAR_Z406007001_HST' THEN\nCASE (&adres_type) /* obv IDC_HVG */\nWHEN 'J' THEN '5' /* Hoofdvestiging */ ELSE '4' /* Vestiging */ END\nWHEN 'STG_EDWH.STG_MAR_Z406009001_HST' THEN &adres_type /* obv KDE_SRT_ADS_ZVL */\nWHEN 'STG_EDWH.STG_MAR_Z405002001_HST' THEN &adres_type /*obv KDE_SRT_ACL */ ELSE '3' /* Onbekend */ END\n\"\"\"\n\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import StringType\n\n# =======================\n# == Original SQL code ==\n# =======================\n\n\n@udf(returnType=StringType())\ndef cz_sas_br_t_adres_type(resource_item, adres_type):\n    resource_mapping = {\n        \"STG_EDWH.STG_MAR_Z430900001_HST\": \"1\",  # Woon\n        \"STG_EDWH.STG_MAR_Z430910001_HST\": \"2\",  # Correspondentie\n        \"STG_EDWH.STG_MAR_Z430915001_HST\": \"6\",  # Woonlandhistorie\n        \"STG_EDWH.STG_KIK_PROSPECTADRES_HST\": {\n            \"W\": \"1\",  # Woon\n            \"C\": \"2\",  # Correspondentie\n            \"default\": \"3\",  # Onbekend\n        },\n        \"STG_EDWH.STG_MAR_Z406007001_HST\": {\n            \"J\": \"5\",  # Hoofdvestiging\n            \"default\": \"4\",  # Vestiging\n        },\n        \"STG_EDWH.STG_MAR_Z406009001_HST\": adres_type,  # obv KDE_SRT_ADS_ZVL\n        \"STG_EDWH.STG_MAR_Z405002001_HST\": adres_type,  # obv KDE_SRT_ACL\n        \"default\": \"3\",  # Onbekend\n    }\n\n    result = resource_mapping.get(resource_item, resource_mapping[\"default\"])\n\n    if isinstance(result, dict):\n        result = result.get(adres_type, result[\"default\"])\n\n    return result\n"}